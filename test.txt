# -------------------- routes/public_shop.py --------------------
from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session, joinedload
from typing import Optional

from database import get_db
from crud.shop import get_shop_by_slug
from app.models.product import ProductModel
from schemas.product import ProductWithShop, ShopPublic

router = APIRouter(prefix="/shops", tags=["Shops - Public"])


# 1) Listar productos públicos de una tienda por slug (con búsqueda y paginación simple)
@router.get("/{slug}/products", response_model=list[ProductWithShop])
def list_products_by_shop(
    slug: str,
    db: Session = Depends(get_db),
    q: Optional[str] = None,   # búsqueda por nombre
    limit: int = 20,           # paginación simple
    offset: int = 0,
):
    # Traer tienda
    shop = get_shop_by_slug(db, slug)
    if not shop or (hasattr(shop, "is_active") and not shop.is_active):
        raise HTTPException(status_code=404, detail="Tienda no encontrada o inactiva")

    # Query base
    query = (
        db.query(ProductModel)
        .options(joinedload(ProductModel.shop))  # evita N+1
        .filter(ProductModel.shop_id == shop.id)
    )

    # Filtro por nombre (MySQL generalmente es case-insensitive por collation;
    # si quisieras forzar case-insensitive en otro motor, podrías usar lower())
    if q:
        query = query.filter(ProductModel.name.ilike(f"%{q}%"))

    products = query.offset(offset).limit(limit).all()

    # Armar objeto público de tienda para adjuntar en la respuesta de cada producto
    shop_public = ShopPublic(
        name=shop.name,
        slug=shop.slug,
        whatsapp_number=shop.whatsapp_number,
        yape_number=shop.yape_number,
        plin_number=shop.plin_number,
        logo_url=shop.logo_url,
        theme_color=shop.theme_color,
    )

    # Mapear a esquema público de producto
    return [
        ProductWithShop(
            id=p.id,
            name=p.name,
            description=p.description,
            price=p.price,
            image_url=p.image_url,
            promotion=p.promotion,
            stock=p.stock,
            user_id=p.user_id,
            shop=shop_public,
        )
        for p in products
    ]


# 2) Detalle de un producto dentro de una tienda (slug + product_id)
@router.get("/{slug}/products/{product_id}", response_model=ProductWithShop)
def read_product_in_shop(slug: str, product_id: int, db: Session = Depends(get_db)):
    shop = get_shop_by_slug(db, slug)
    if not shop or (hasattr(shop, "is_active") and not shop.is_active):
        raise HTTPException(status_code=404, detail="Tienda no encontrada o inactiva")

    p = (
        db.query(ProductModel)
        .options(joinedload(ProductModel.shop))
        .filter(
            ProductModel.shop_id == shop.id,
            ProductModel.id == product_id
        )
        .first()
    )
    if not p:
        raise HTTPException(status_code=404, detail="Producto no encontrado en esta tienda")

    return ProductWithShop(
        id=p.id,
        name=p.name,
        description=p.description,
        price=p.price,
        image_url=p.image_url,
        promotion=p.promotion,
        stock=p.stock,
        user_id=p.user_id,
        shop=ShopPublic(
            name=shop.name,
            slug=shop.slug,
            whatsapp_number=shop.whatsapp_number,
            yape_number=shop.yape_number,
            plin_number=shop.plin_number,
            logo_url=shop.logo_url,
            theme_color=shop.theme_color,
        ),
    )


# 3) Perfil público de tienda por slug (para pintar título/tema/contacto en frontend)
@router.get("/{slug}", response_model=ShopPublic)
def shop_public_info(slug: str, db: Session = Depends(get_db)):
    shop = get_shop_by_slug(db, slug)
    if not shop or (hasattr(shop, "is_active") and not shop.is_active):
        raise HTTPException(status_code=404, detail="Tienda no encontrada o inactiva")

    return ShopPublic(
        name=shop.name,
        slug=shop.slug,
        whatsapp_number=shop.whatsapp_number,
        yape_number=shop.yape_number,
        plin_number=shop.plin_number,
        logo_url=shop.logo_url,
        theme_color=shop.theme_color,
    )