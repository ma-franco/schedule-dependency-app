// /frontend/seller/orders.js
(() => {
  const API = "http://127.0.0.1:8000";

  // ===== Auth guard =====
  const token = localStorage.getItem("auth_token");
  const type  = (localStorage.getItem("token_type") || "bearer").toLowerCase();
  const role  = localStorage.getItem("user_role") || "";
  if (!token) {
    window.location.replace("/frontend/seller/login.html");
    return;
  }

  // ===== DOM =====
  const tokEl      = document.getElementById("tok");
  const roleEl     = document.getElementById("role");
  const apiStatus  = document.getElementById("apiStatus");
  const rowsEl     = document.getElementById("rows");
  const emptyBox   = document.getElementById("emptyBox");
  const countInfo  = document.getElementById("countInfo");

  const fStatus = document.getElementById("fStatus");
  const fQ      = document.getElementById("fQ");
  const fFrom   = document.getElementById("fFrom");
  const fTo     = document.getElementById("fTo");
  const fLimit  = document.getElementById("fLimit");

  const btnSearch = document.getElementById("btnSearch");
  const btnClear  = document.getElementById("btnClear");
  const btnPrev   = document.getElementById("btnPrev");
  const btnNext   = document.getElementById("btnNext");
  const logoutBtn = document.getElementById("logoutBtn");

  if (tokEl)  tokEl.textContent  = token.slice(0, 12) + "...";
  if (roleEl) roleEl.textContent = role || "(sin rol)";

  // ===== Estado =====
  let offset = 0;
  let lastCount = 0;
  let productNameById = {}; // mapa product_id -> name

  // ===== Utils =====
  async function apiFetch(path, opts = {}) {
    const res = await fetch(`${API}${path}`, {
      ...opts,
      headers: {
        "Authorization": `${type} ${token}`,
        "Content-Type": "application/json",
        ...(opts.headers || {}),
      },
    });
    let data = null;
    try { data = await res.json(); } catch {}
    return { ok: res.ok, status: res.status, data };
  }

  function setStatus(msg) {
    if (apiStatus) apiStatus.textContent = msg || "";
  }

  function formatDateTime(iso) {
    if (!iso) return "—";
    const d = new Date(iso);
    // Hora local con formato corto
    return d.toLocaleString("es-PE", {
      year: "numeric", month: "2-digit", day: "2-digit",
      hour: "2-digit", minute: "2-digit"
    });
  }

  function badge(status) {
    const base = "px-2 py-0.5 rounded text-xs font-semibold";
    if (status === "paid") return `<span class="${base} bg-emerald-600/80">Pagado</span>`;
    if (status === "cancelled") return `<span class="${base} bg-rose-600/80">Cancelado</span>`;
    return `<span class="${base} bg-amber-600/80">Pendiente</span>`;
  }

  // ===== Cargar mapa de productos (para mostrar nombre) =====
  async function loadProductsMap() {
    const r = await apiFetch("/seller/products/");
    if (r.ok && Array.isArray(r.data)) {
      productNameById = {};
      r.data.forEach(p => { productNameById[p.id] = p.name; });
    }
  }

  function getProductName(id) {
    return productNameById[id] || `#${id}`;
  }

  // ===== Render fila =====
  function renderRow(o) {
    const tr = document.createElement("tr");
    tr.className = "border-b border-slate-700/60 hover:bg-slate-800/60";
    tr.innerHTML = `
      <td class="px-3 py-2">#${o.id}</td>
      <td class="px-3 py-2 whitespace-nowrap">${formatDateTime(o.created_at)}</td>
      <td class="px-3 py-2">${getProductName(o.product_id)}</td>
      <td class="px-3 py-2">
        <div class="leading-5">
          <div>${o.buyer_name || "—"}</div>
          <div class="text-slate-400 text-xs">${o.buyer_phone || ""}</div>
        </div>
      </td>
      <td class="px-3 py-2 uppercase">${o.payment_method}</td>
      <td class="px-3 py-2">S/ ${Number(o.amount).toFixed(2)}</td>
      <td class="px-3 py-2">${badge(o.status)}</td>
      <td class="px-3 py-2 break-all">${o.tx_ref || "—"}</td>
      <td class="px-3 py-2">
        <div class="flex justify-end gap-2">
          <button class="btn-pay bg-emerald-600 hover:bg-emerald-700 px-3 py-1 rounded text-sm" ${o.status !== "pending" ? "disabled" : ""}>Pagar</button>
          <button class="btn-cancel bg-amber-600 hover:bg-amber-700 px-3 py-1 rounded text-sm" ${o.status !== "pending" ? "disabled" : ""}>Cancelar</button>
          <button class="btn-del bg-rose-600 hover:bg-rose-700 px-3 py-1 rounded text-sm">Borrar</button>
        </div>
      </td>
    `;

    // Handlers
    const btnPay    = tr.querySelector(".btn-pay");
    const btnCancel = tr.querySelector(".btn-cancel");
    const btnDel    = tr.querySelector(".btn-del");

    // Evitar dobles clics:
    function lock(btns, locked) {
      btns.forEach(b => { if (b) b.disabled = locked; });
    }

    btnPay?.addEventListener("click", async () => {
      lock([btnPay, btnCancel, btnDel], true);
      const r = await apiFetch(`/seller/orders/${o.id}/paid`, { method: "PATCH" });
      if (r.ok) {
        // Actualiza status en la fila
        o.status = r.data.status;
        tr.querySelector("td:nth-child(7)").innerHTML = badge(o.status);
        btnPay.disabled = true;
        btnCancel.disabled = true;
      }
      lock([btnPay, btnCancel, btnDel], false);
    });

    btnCancel?.addEventListener("click", async () => {
      lock([btnPay, btnCancel, btnDel], true);
      const r = await apiFetch(`/seller/orders/${o.id}/cancel`, { method: "PATCH" });
      if (r.ok) {
        o.status = r.data.status;
        tr.querySelector("td:nth-child(7)").innerHTML = badge(o.status);
        btnPay.disabled = true;
        btnCancel.disabled = true;
      }
      lock([btnPay, btnCancel, btnDel], false);
    });

    btnDel?.addEventListener("click", async () => {
      const ok = confirm(`¿Eliminar la orden #${o.id}?`);
      if (!ok) return;
      lock([btnPay, btnCancel, btnDel], true);
      const r = await apiFetch(`/seller/orders/${o.id}`, { method: "DELETE" });
      if (r.ok || r.status === 204) {
        tr.remove();
        lastCount -= 1;
        updateCountInfo();
        if (!rowsEl.children.length) emptyBox.classList.remove("hidden");
      } else {
        lock([btnPay, btnCancel, btnDel], false);
      }
    });

    return tr;
  }

  function updateCountInfo() {
    const lim = Number(fLimit.value || 50);
    const from = offset + 1;
    const to   = offset + lastCount;
    countInfo.textContent = lastCount ? `Mostrando ${from}–${to}` : "";
  }

  // ===== Cargar lista =====
  async function loadOrders() {
    setStatus("Cargando…");
    rowsEl.innerHTML = "";
    emptyBox.classList.add("hidden");

    const params = new URLSearchParams();
    const lim = Number(fLimit.value || 50);

    if (fStatus.value) params.set("status", fStatus.value);
    if ((fQ.value || "").trim()) params.set("q", (fQ.value || "").trim());
    if (fFrom.value) params.set("date_from", fFrom.value);
    if (fTo.value) params.set("date_to", fTo.value);
    params.set("limit", String(lim));
    params.set("offset", String(offset));

    const r = await apiFetch(`/seller/orders/?${params.toString()}`);
    if (r.status === 401 || r.status === 403) {
      setStatus("Token inválido/expirado. Redirigiendo…");
      localStorage.clear();
      setTimeout(() => window.location.replace("/frontend/seller/login.html"), 800);
      return;
    }

    const list = Array.isArray(r.data) ? r.data : [];
    lastCount = list.length;
    updateCountInfo();

    if (!list.length) {
      emptyBox.classList.remove("hidden");
      setStatus("Sin resultados.");
      return;
    }

    list.forEach(o => rowsEl.appendChild(renderRow(o)));
    setStatus(`OK (${list.length})`);
  }

  // ===== Eventos filtros & paginación =====
  document.getElementById("filters")?.addEventListener("submit", (e) => {
    e.preventDefault();
    offset = 0;
    loadOrders();
  });

  btnClear?.addEventListener("click", () => {
    fStatus.value = "";
    fQ.value = "";
    fFrom.value = "";
    fTo.value = "";
    offset = 0;
    loadOrders();
  });

  btnPrev?.addEventListener("click", () => {
    const lim = Number(fLimit.value || 50);
    offset = Math.max(0, offset - lim);
    loadOrders();
  });

  btnNext?.addEventListener("click", () => {
    const lim = Number(fLimit.value || 50);
    // Avanzamos si la página actual vino “llena” (hay más resultados)
    if (lastCount === lim) {
      offset += lim;
      loadOrders();
    }
  });

  // ===== Logout =====
  logoutBtn?.addEventListener("click", () => {
    localStorage.clear();
    window.location.replace("/frontend/seller/login.html");
  });

  // ===== Init =====
  (async function init() {
    try {
      await loadProductsMap(); // para mostrar nombre del producto
      await loadOrders();
    } catch {
      setStatus("No se pudo llamar al API.");
    }
  })();
})();