// frontend/seller/login.js

const form = document.getElementById("loginForm");
const userEl = document.getElementById("username");
const passEl = document.getElementById("password");
const submitBtn = document.getElementById("loginBtn");
const errorBox = document.getElementById("errorBox");

// util: mostrar errores bonitos
function showError(msg) {
  if (!errorBox) return;
  errorBox.textContent = msg || "Ocurrió un error.";
  errorBox.classList.remove("hidden");
}
function clearError() {
  if (!errorBox) return;
  errorBox.textContent = "";
  errorBox.classList.add("hidden");
}

if (form) {
  form.addEventListener("submit", async (e) => {
    e.preventDefault();
    clearError();

    const username = userEl?.value?.trim();
    const password = passEl?.value ?? "";

    if (!username || !password) {
      showError("Ingresa usuario y contraseña.");
      return;
    }

    // deshabilitar botón
    if (submitBtn) {
      submitBtn.disabled = true;
      submitBtn.classList.add("opacity-60", "pointer-events-none");
    }

    try {
      // IMPORTANTE: FastAPI espera JSON {"username": "...", "password": "..."}
      const res = await fetch("http://127.0.0.1:8000/user/login", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "Accept": "application/json",
        },
        body: JSON.stringify({ username, password }),
      });

      // 422 = body inválido; 401 = credenciales; 200 = OK
      const data = await res.json().catch(() => ({}));

      if (!res.ok) {
        // intenta extraer el mensaje correcto
        const msg =
          data?.detail ||
          data?.message ||
          (Array.isArray(data) && data[0]?.msg) || // validaciones pydantic
          "No se pudo iniciar sesión.";
        showError(String(msg));
        return;
      }

      // esperamos algo como {access_token: "...", token_type: "bearer", role: "seller"|...}
      const token = data?.access_token;
      const role = data?.role;

      if (!token) {
        showError("Respuesta inválida del servidor (sin token).");
        return;
      }

      // guarda token para siguientes llamadas
      localStorage.setItem("access_token", token);
      localStorage.setItem("token_type", data?.token_type || "bearer");
      if (role) localStorage.setItem("role", role);

      // redirige al dashboard del seller
      window.location.href = "/frontend/seller/dashboard.html";
    } catch (err) {
      console.error(err);
      showError("Error de red o servidor no disponible.");
    } finally {
      if (submitBtn) {
        submitBtn.disabled = false;
        submitBtn.classList.remove("opacity-60", "pointer-events-none");
      }
    }
  });
}